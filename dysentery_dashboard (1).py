# -*- coding: utf-8 -*-
"""dysentery_dashboard

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T1Gpkdw6kZ2OrTuZUhcgdd5pynEfLxNz
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# -----------------------------------
# Page Setup
# -----------------------------------
st.set_page_config(page_title="Dysentery in Lebanon Dashboard", layout="wide")
st.title("📊 Dysentery in Lebanon")
st.markdown("Explore trends and patterns in dysentery cases across Lebanese governorates using public health data.")

# -----------------------------------
# Load and Clean Data
# -----------------------------------
@st.cache_data
def load_data():
    df = pd.read_csv("Dysentery_data.csv")
    df = df[df["Number of cases"].notna()].copy()
    df["Governorate"] = df["refArea"].str.extract(r'/resource/([^/]+)$')[0].str.replace('_', ' ')
    df["Year"] = df["refPeriod"].str.extract(r'(\d{4})')
    df["Month"] = df["refPeriod"].str.extract(r'(\d{2})-\d{4}')[0]
    df["Date"] = pd.to_datetime(df["Year"] + "-" + df["Month"], errors='coerce')
    df = df[["Date", "Year", "Month", "Governorate", "Number of cases"]].dropna()
    return df.sort_values(by=["Date", "Governorate"])

df = load_data()

# -----------------------------------
# Filters
# -----------------------------------
st.sidebar.header("🧭 Filters")
years = sorted(df["Year"].unique())
governorates = sorted(df["Governorate"].unique())

selected_years = st.sidebar.multiselect("Select Year(s)", options=years, default=years)
selected_govs = st.sidebar.multiselect("Select Governorate(s)", options=governorates, default=governorates)

df_filtered = df[(df["Year"].isin(selected_years)) & (df["Governorate"].isin(selected_govs))]

# -----------------------------------
# KPI Metrics
# -----------------------------------
total_cases = int(df_filtered["Number of cases"].sum())
total_months = df_filtered["Date"].nunique()
total_regions = df_filtered["Governorate"].nunique()

col1, col2, col3 = st.columns(3)
col1.metric("🦠 Total Cases", f"{total_cases}")
col2.metric("📅 Months Covered", f"{total_months}")
col3.metric("📍 Governorates", f"{total_regions}")

# -----------------------------------
# 📈 Trend Over Time (Matplotlib)
# -----------------------------------
st.subheader("📈 Trend of Dysentery Cases Over Time")
line_data = df_filtered.groupby("Date")["Number of cases"].sum().reset_index()

fig1, ax1 = plt.subplots(figsize=(12, 5))
ax1.plot(line_data["Date"], line_data["Number of cases"], marker='o')
ax1.set_title("Total Dysentery Cases Over Time in Lebanon")
ax1.set_xlabel("Date")
ax1.set_ylabel("Number of Cases")
ax1.grid(True)
plt.xticks(rotation=45)
st.pyplot(fig1)

# -----------------------------------
# 📍 Cases by Governorate (Matplotlib)
# -----------------------------------
st.subheader("📍 Total Cases by Governorate")
gov_data = df_filtered.groupby("Governorate")["Number of cases"].sum().reset_index()
gov_data = gov_data.sort_values(by="Number of cases", ascending=True)

fig2, ax2 = plt.subplots(figsize=(10, 6))
ax2.barh(gov_data["Governorate"], gov_data["Number of cases"], color='skyblue')
ax2.set_title("Total Dysentery Cases by Governorate")
ax2.set_xlabel("Number of Cases")
ax2.set_ylabel("Governorate")
st.pyplot(fig2)

# -----------------------------------
# 📆 Average Monthly Cases (Matplotlib)
# -----------------------------------
st.subheader("📆 Average Monthly Cases")
df_filtered["Month Name"] = pd.to_datetime(df_filtered["Month"], format="%m").dt.strftime("%B")
monthly_avg = df_filtered.groupby("Month Name")["Number of cases"].mean()

month_order = ["January", "February", "March", "April", "May", "June",
               "July", "August", "September", "October", "November", "December"]
monthly_avg = monthly_avg.reindex(month_order)

fig3, ax3 = plt.subplots(figsize=(12, 5))
ax3.bar(monthly_avg.index, monthly_avg.values, color='orange')
ax3.set_title("Average Monthly Dysentery Cases in Lebanon")
ax3.set_xlabel("Month")
ax3.set_ylabel("Average Number of Cases")
plt.xticks(rotation=45)
st.pyplot(fig3)

# -----------------------------------
# Footer
# -----------------------------------
st.markdown("---")
st.markdown("**Source**: Lebanese Ministry of Public Health | AUB MSBA350 – Healthcare Analytics")